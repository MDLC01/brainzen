namespace Tests {
    // Note that most tests for operations do not work properly because the result is computed at compile time.
    // This can be disabled by modifying `{Unary,Binary}Operation::get_predicted_char_value` to always return None.

    /// Tests equality and difference tests.
    func equality_difference() {
        // Equality
        @(0 == 0);
        @!(0 == 1);
        @(1 == 1);
        @!(1 == 0);
        @!(0 == '0');
        @((1, 2, 3) == (1, 2, 3));
        @!((1, 2, 3) == (2, 2, 3));
        @!((1, 2, 3) == (1, 1, 3));
        @!((1, 2, 3) == (1, 2, 4));
        // Difference
        @!(0 != 0);
        @(0 != 1);
        @!(1 != 1);
        @(1 != 0);
        @(0 != '0');
        @!((1, 2, 3) != (1, 2, 3));
        @((1, 2, 3) != (2, 2, 3));
        @((1, 2, 3) != (1, 1, 3));
        @((1, 2, 3) != (1, 2, 4));
    }

    /// Tests [inverse] [strict] inequality tests.
    func inequalities() {
        // lhs == rhs
        @ (  0 <=   0);
        @ (  0 >=   0);
        @!(  0 <    0);
        @!(  0 >    0);
        @ (  1 <=   1);
        @ (  1 >=   1);
        @!(  1 <    1);
        @!(  1 >    1);
        @ ( 42 <=  42);
        @ ( 42 >=  42);
        @!( 42 <   42);
        @!( 42 >   42);
        @ (254 <= 254);
        @ (254 >= 254);
        @!(254 <  254);
        @!(254 >  254);
        @ (255 <= 255);
        @ (255 >= 255);
        @!(255 <  255);
        @!(255 >  255);
        // lhs < rhs
        @ (  0 <=   1);
        @!(  0 >=   1);
        @ (  0 <    1);
        @!(  0 >    1);
        @ (  0 <=  42);
        @!(  0 >=  42);
        @ (  0 <   42);
        @!(  0 >   42);
        @ (  1 <=  42);
        @!(  1 >=  42);
        @ (  1 <   42);
        @!(  1 >   42);
        @ ( 10 <=  42);
        @!( 10 >=  42);
        @ ( 10 <   42);
        @!( 10 >   42);
        @ ( 41 <=  42);
        @!( 41 >=  42);
        @ ( 41 <   42);
        @!( 41 >   42);
        @ ( 42 <= 254);
        @!( 42 >= 254);
        @ ( 42 <  254);
        @!( 42 >  254);
        @ ( 42 <= 255);
        @!( 42 >= 255);
        @ ( 42 <  255);
        @!( 42 >  255);
        @ (254 <= 255);
        @!(254 >= 255);
        @ (254 <  255);
        @!(254 >  255);
        // lhs > rhs
        @!(  1 <=   0);
        @ (  1 >=   0);
        @!(  1 <    0);
        @ (  1 >    0);
        @!( 42 <=   0);
        @ ( 42 >=   0);
        @!( 42 <    0);
        @ ( 42 >    0);
        @!( 42 <=   1);
        @ ( 42 >=   1);
        @!( 42 <    1);
        @ ( 42 >    1);
        @!( 42 <=  10);
        @ ( 42 >=  10);
        @!( 42 <   10);
        @ ( 42 >   10);
        @!( 42 <=  41);
        @ ( 42 >=  41);
        @!( 42 <   41);
        @ ( 42 >   41);
        @!(254 <=  42);
        @ (254 >=  42);
        @!(254 <   42);
        @ (254 >   42);
        @!(255 <=  42);
        @ (255 >=  42);
        @!(255 <   42);
        @ (255 >   42);
        @!(255 <= 254);
        @ (255 >= 254);
        @!(255 <  254);
        @ (255 >  254);
    }

    /// Tests conjunction.
    func conjunction() {
        @!(  0 &&   0);
        @!(  1 &&   0);
        @!(  0 &&   1);
        @ (  1 &&   1);
        @!( 42 &&   0);
        @!(  0 &&  42);
        @ ( 42 &&   1);
        @ (  1 &&   1);
        @ ( 42 &&  42);
        @ ( 42 && 255);
        @ (255 &&  42);
        @ (254 && 255);
        @ (255 && 254);
        @ (255 && 255);
        @!(  0 && 255);
        @!(255 &&   0);
    }

    /// Tests boolean disjunction.
    func boolean_disjunction() {
        @!(0 || 0);
        @(0 || 1);
        @(1 || 0);
        @(1 || 1);
        @(0 || 3);
        @(2 || 0);
        @(2 || 3);
        @(255 || 254);
        @(255 || 255);
        @(255 || 0);
        @(0 || 255);
    }

    /// Tests disjunction.
    func disjunction() {
        print(0 ?? 0);
        print(0 ?? 1);
        print(1 ?? 0);
        print(1 ?? 1);
        print(0 ?? 3);
        print(2 ?? 0);
        print(2 ?? 3);
        print(255 ?? 255);
        print(255 ?? 254);
        print(255 ?? 0);
        print(0 ?? 255);
    }

    /// Tests addition and subtraction.
    func addition_subtraction() {
        // Addition
        print(0 + 0);
        print(1 + 0);
        print(0 + 1);
        print(1 + 1);
        print(0xA3 + 0x37);
        print('0' + 4);
        print(254 + 254);
        print(255 + 254);
        print(254 + 255);
        print(255 + 255);
        // Subtraction
        print(0 - 0);
        print(1 - 0);
        print(0 - 1);
        print(1 - 1);
        print(0xA3 - 0x37);
        print('0' - 4);
        print(254 - 254);
        print(255 - 254);
        print(254 - 255);
        print(255 - 255);
    }

    /// Tests multiplication.
    func multiplication() {
        print(  0 *   0);
        print(  0 *   1);
        print(  0 *  42);
        print(  0 * 254);
        print(  0 * 255);
        print(  1 *   0);
        print(  1 *   1);
        print(  1 *  42);
        print(  1 * 254);
        print(  1 * 255);
        print( 42 *   0);
        print( 42 *   1);
        print( 42 *  42);
        print( 42 * 254);
        print( 42 * 255);
        print(254 *   0);
        print(254 *   1);
        print(254 *  42);
        print(254 * 254);
        print(254 * 255);
        print(255 *   0);
        print(255 *   1);
        print(255 *  42);
        print(255 * 254);
        print(255 * 255);
    }

    /// Tests division.
    func division() {
        print(  0 /   1);
        print(  0 /   2);
        print(  0 /   3);
        print(  0 /  42);
        print(  0 / 254);
        print(  0 / 255);
        print(  1 /   1);
        print(  1 /   2);
        print(  1 /   3);
        print(  1 /  42);
        print(  1 / 254);
        print(  1 / 255);
        print(  2 /   1);
        print(  2 /   2);
        print(  2 /   3);
        print(  2 /  42);
        print(  2 / 254);
        print(  2 / 255);
        print(  3 /   1);
        print(  3 /   2);
        print(  3 /   3);
        print(  3 /  42);
        print(  3 / 254);
        print(  3 / 255);
        print( 42 /   1);
        print( 42 /   2);
        print( 42 /   3);
        print( 42 /  42);
        print( 42 / 254);
        print( 42 / 255);
        print(254 /   1);
        print(254 /   2);
        print(254 /   3);
        print(254 /  42);
        print(254 / 254);
        print(254 / 255);
        print(255 /   1);
        print(255 /   2);
        print(255 /   3);
        print(255 /  42);
        print(255 / 254);
        print(255 / 255);
    }

    /// Tests modulo.
    func modulo() {
        print(  0 %   1);
        print(  0 %   2);
        print(  0 %   3);
        print(  0 %  42);
        print(  0 % 254);
        print(  0 % 255);
        print(  1 %   1);
        print(  1 %   2);
        print(  1 %   3);
        print(  1 %  42);
        print(  1 % 254);
        print(  1 % 255);
        print(  2 %   1);
        print(  2 %   2);
        print(  2 %   3);
        print(  2 %  42);
        print(  2 % 254);
        print(  2 % 255);
        print(  3 %   1);
        print(  3 %   2);
        print(  3 %   3);
        print(  3 %  42);
        print(  3 % 254);
        print(  3 % 255);
        print( 42 %   1);
        print( 42 %   2);
        print( 42 %   3);
        print( 42 %  42);
        print( 42 % 254);
        print( 42 % 255);
        print(254 %   1);
        print(254 %   2);
        print(254 %   3);
        print(254 %  42);
        print(254 % 254);
        print(254 % 255);
        print(255 %   1);
        print(255 %   2);
        print(255 %   3);
        print(255 %  42);
        print(255 % 254);
        print(255 % 255);
    }

    /// Tests divmod.
    func divmod() {
        print(  0 %%   1);
        print(  0 %%   2);
        print(  0 %%   3);
        print(  0 %%  42);
        print(  0 %% 254);
        print(  0 %% 255);
        print(  1 %%   1);
        print(  1 %%   2);
        print(  1 %%   3);
        print(  1 %%  42);
        print(  1 %% 254);
        print(  1 %% 255);
        print(  2 %%   1);
        print(  2 %%   2);
        print(  2 %%   3);
        print(  2 %%  42);
        print(  2 %% 254);
        print(  2 %% 255);
        print(  3 %%   1);
        print(  3 %%   2);
        print(  3 %%   3);
        print(  3 %%  42);
        print(  3 %% 254);
        print(  3 %% 255);
        print( 42 %%   1);
        print( 42 %%   2);
        print( 42 %%   3);
        print( 42 %%  42);
        print( 42 %% 254);
        print( 42 %% 255);
        print(254 %%   1);
        print(254 %%   2);
        print(254 %%   3);
        print(254 %%  42);
        print(254 %% 254);
        print(254 %% 255);
        print(255 %%   1);
        print(255 %%   2);
        print(255 %%   3);
        print(255 %%  42);
        print(255 %% 254);
        print(255 %% 255);
    }

    /// Tests printing stuff.
    func io() {
        print(0);
        print(42);
        print(0x42);
        print('a');
        print('\n');
        println("Hello, World!");
    }

    type MyChar = char;
    type CharSquared = char * char;

    /// Tests the type system. This test passes if, and only if, the function compiles.
    func types() {
        let a: char;
        let b: char * char;
        let c: MyChar;
        let d: CharSquared;
        a = c;
        c = a;
        b = d;
        d = b;
    }
}
